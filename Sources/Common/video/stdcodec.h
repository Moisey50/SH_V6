
//  $File : stdcodec.h - interface to VFW video compression library
//  (C) Copyright The FileX Ltd 2002. 
//
//
//
//  Revision History (excluding minor changes for specific compilers)
//   13 May 02 Firts release version, all followed changes must be listed below  (Andrey Chernushich)
//   12 January 04 converter from UYVY to YUV9
//   2014 full revorking by Andrey Chernushich (without comments changing)

#ifndef _STDCODEC_INC
#define _STDCODEC_INC

#include <video\tvframe.h>
#include <video\shvideo.h>
#include <vfw.h>
bool    FX_EXT_SHVIDEO _decompress_any(pTVFrame frame);
bool    FX_EXT_SHVIDEO makeYUV9(LPBITMAPINFOHEADER* frame);
bool    FX_EXT_SHVIDEO makeYUV9(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _decompress_raw(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _compress_yuv9(LPBITMAPINFOHEADER in);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _compress(LPBITMAPINFOHEADER in, HIC compressor);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertYUY2YUV9(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertYUY2YUV12(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertUYVY2YUV12(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertUYVY2YUV9(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertY411YUV9(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertRGB8Gray2YUV9(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertY82YUV9(pTVFrame frame);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertYUV122YUV9( pTVFrame frame , bool bAsI420 = false );
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertNV12toYUV9( pTVFrame frame );
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _convertNV12toYUV12( pTVFrame frame );
void FX_EXT_SHVIDEO _swapUVforI420orYUV12( pTVFrame frame );
LPBITMAPINFOHEADER FX_EXT_SHVIDEO yuv9rgb24(LPBITMAPINFOHEADER src, LPBYTE lpData=NULL, LPVOID lpDst=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO yuv12rgb24(LPBITMAPINFOHEADER src, LPBYTE lpData=NULL, LPVOID lpDst=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO rgbrgb24(LPBITMAPINFOHEADER src, LPBYTE lpData=NULL, LPVOID lpDst=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO rgb24yuv9(LPBITMAPINFOHEADER src, LPBYTE lpData=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO rgb24yuv12( LPBITMAPINFOHEADER src , LPBYTE lpData = NULL ) ;
LPBITMAPINFOHEADER FX_EXT_SHVIDEO rgb24_to_y8( LPBITMAPINFOHEADER src , LPBYTE lpData = NULL ) ;  // <= new for Logitec
LPBITMAPINFOHEADER FX_EXT_SHVIDEO yuv411yuv9(LPBITMAPINFOHEADER src, LPBYTE lpData=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO yuv12yuv9(LPBITMAPINFOHEADER src, LPBYTE lpData=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO yuv9rgb8(LPBITMAPINFOHEADER src, LPBYTE lpData, LPVOID lpDst=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO yuv12rgb8(LPBITMAPINFOHEADER src, LPBYTE lpData, LPVOID lpDst=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO y8rgb8(LPBITMAPINFOHEADER src, LPBYTE lpData);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO y16rgb8(LPBITMAPINFOHEADER src, LPBYTE lpD, LPVOID lpDst=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO y16yuv8( LPBITMAPINFOHEADER src , LPBYTE lpD , int iShift = 8 );
LPBITMAPINFOHEADER FX_EXT_SHVIDEO y8y16( LPBITMAPINFOHEADER src , LPBYTE lpD , int iShift = 0 );
LPBITMAPINFOHEADER FX_EXT_SHVIDEO y8yuv9( LPBITMAPINFOHEADER src , LPBYTE lpD );
LPBITMAPINFOHEADER FX_EXT_SHVIDEO y8rgb24(LPBITMAPINFOHEADER src, LPBYTE lpD);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO rgb24rdb32(LPBITMAPINFOHEADER src, LPBYTE lpData=NULL);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO y16rgb24(LPBITMAPINFOHEADER src, LPBYTE lpD);
LPBITMAPINFOHEADER FX_EXT_SHVIDEO _decompress2rgb(const pTVFrame frame, bool mono=false);

#endif // _STDCODEC_INC
